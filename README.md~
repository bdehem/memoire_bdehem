# UCL_DRONE_2017

This repository contains the code related to the master theses conducted at INMA (UCL) in 2017 using Parrot AR.Drone 2.0.

Please read `CONTRIBUTING.md` if you are going to contribute to this project.

## Installation

0. Dependencies: This package depends on the following software:
  - ROS (indigo)
  - ardrone_autonomy (ROS package)
  - PCL
  - OpenCV 2.4.* with nonfree modules
  - Ceres Solver
1. In the src directory of your ROS (catkin) workspace, git clone this directory
2. Run 'catkin_make' in the root directory of the ROS (catkin) workspace
3. Add the following line at the end of the `~/.bashrc` file
`source <path to your ROS workspace>/devel/setup.bash`


## Documentation
This folder `src/ucl_drone/documentation` contains the documentation generated in html with doxygen
`Link to Documentation` show an index of the classes of the project


## Folders structure

In `ucl_drone` package:

- `auxiliary_code` Some python code to interpret the output of benchmarks

- `camera_info` YAML files with camera parameters

- `documentation/` Documentation

- `drone_preparation/Appareillage` Contains `autoconfarparrot` to reconfigure AR.Drone for multi-drone missions. (see `README` in this folder)

-	`include/ucl_drone/` Contains C++ header files.

- `launch/` Contains all `.launch` files (see `README` in this folder).

- `msg/` Contains ROS messages definitions.

-	`src/` Contains C++ source code

- `srv/` Contains ROS services defintions.

- `target/` Contains target pictures.

-	`CmakeLists.txt` Contains instructions to build nodes with catkin (has to be modified when adding nodes/dependencies).

- `Doxyfile` Parameters of doxygen (used to automatically create documentation)

-	`package.xml` Package information.



##### Quick start

#### With only one drone (physical or simulated by a rosbag file)

This procedure do not reconfigure the drone and directly use the WiFi hotspot provided by the drone.

0. If using a physical drone (not a simulation) turn on the drone by plugging in a battery and waiting for the green LEDs to turn on. From the PC, connect to the wifi network created by the drone.
1. In a terminal, launch the mission:  
    ```
    $ roslaunch ucl_drone <FILENAME>.launch
    ```
	according to the mission (see `README` in the `launch/` directory).

#### With several drones (2016)


### Configuration

The `essid` of each drone has to be known and listed. An `ip` address has to be attributed as described in `README` in `drone_preparation/Appareillage/` folder.

### Run

0. Verify the computer has a wired connection to the WiFi router.
1.  Plug fully charged batteries in each drone and wait until four green LED's are on for each drone
2.	On the Ubuntu desktop, turn on the network applet, wait until the drone WiFi discovery of each drone
3.	In a console, run

    ```
    $ cd src/ucl_drone/drone_preparation/Appareillage
    $ bash autoconfarparrot
    ```

    Wait until success messages (in green) for each done.
    If a red message (error) is diplayed, follow instructions on the screen.

4. In another console, run:
    ```
    $ roscore
    ```
    wait until
    ```
    started core service [/rosout]
    ```

5. In a last console,
    ```
    $ roslaunch ucl_drone <FILENAME>.launch
    ```
	 according to the mission (see `README` in the `launch/` directory).

6. Press `Ctrl-C` to kill nodes

    **Caution**: If nodes are killed before the landing command is sent, the drone maintain flight ! Either you launch nodes again or you catch the drone carefully in your hands and you turn it over (it turns off the motors and sets the emergency mode).

    You can also use `ucl_drone_gui`: run `rqt` in a console (the plugin is in the menu). Caution! `rqt` has to be launched after `roscore` and cannot be used after `roscore` is killed.


##### Camera calibration

Read the
[ardrone_autonomy tutorial](http://ardrone-autonomy.readthedocs.io/en/latest/FAQ.html#how-can-i-calibrate-the-ardrone-front-bottom-camera)

<!-- [ROS Wiki](http://wiki.ros.org/camera_calibration)
and  [Tutorial](http://wiki.ros.org/camera_calibration/Tutorials/MonocularCalibration) -->

#### ucl_drone
To run properly the launch files available with the ucl_drone nodes, the following configuration is needed:

The two following files are required:
 * `~/.ros/camera_info/ardrone_bottom.yaml`
 * `~/.ros/camera_info/ardrone_front.yaml`

These files are generated by the [camera_calibration](http://wiki.ros.org/camera_calibration) node.

Examples of these files are available in `src/ucl_drone/camera_info`.
