else if (OF_mode==0 )
{
  int min_x, max_x, min_y, max_y;
  int nrow = cv_img->image.rows;
  int ncol = cv_img->image.cols;
  //int thresh_x = (int)ncol*border_detec_frac;
  //int thresh_y = (int)nrow*border_detec_frac;
  //if (min_x>thresh_x||max_x<ncol-thresh_x||min_y>thresh_y||max_y<nrow-thresh_y)
  //{
    //ROS_INFO("additional detection");
    trackKeypoints(this->descriptors,this->keypoints, prev, min_x, max_x, min_y, max_y);
    if(min_x>max_x||min_y>max_y)
    {
      ROS_WARN("No tracked keypoints?");
      this->keypoints.clear();
      this->descriptors = cv::Mat();
      cv::Mat trash;
      detectKeypoints(this->descriptors, this->keypoints, true, trash);
      n_pts = this->keypoints.size();
      made_full_detection = true;
      return;
    }
    cv::Mat mask = cv::Mat::ones(nrow,ncol,CV_8UC1);
    cv::Mat roi(mask,cv::Rect(min_x,min_y,max_x-min_x,max_y-min_y));
    roi = cv::Scalar(0);

    //cv::Mat mask = cv::Mat::zeros(nrow,ncol,CV_8UC1);
    //if (min_x>thresh_x)
    //{
      //cv::Mat roi(mask,cv::Rect(0, min_y, min_x, max_y-min_y));
      //roi = cv::Scalar(1);
    //}
    //if (max_x<ncol-thresh_x)
    //{
      //cv::Mat roi(mask,cv::Rect(max_x, min_y, ncol-max_x, max_y-min_y));
      //roi = cv::Scalar(1);
    //}
    //if (min_y>thresh_y)
    //{
      //cv::Mat roi(mask,cv::Rect(min_x, 0, max_x-min_x, min_y));
      //roi = cv::Scalar(1);
    //}
    //if (max_y<nrow-thresh_y)
    //{
      //cv::Mat roi(mask,cv::Rect(min_x, max_y, max_x-min_x, nrow-max_y));
      //roi = cv::Scalar(1);
    //}
    //ROS_INFO("maxx = %d; minx = %d; maxy = %d; miny = %d;",max_x,min_x,max_y,min_y);
    cv::Mat detected_descriptors;
    std::vector<cv::KeyPoint> detected_keypoints;
    detectKeypoints(detected_descriptors, detected_keypoints, false, mask);
    keypoints.insert(keypoints.end(), detected_keypoints.begin(), detected_keypoints.end());
    descriptors.push_back(detected_descriptors);
  //}
  n_pts = this->keypoints.size();
  return;
}
else
{
  cv::Mat trash;
  detectKeypoints(this->descriptors, this->keypoints, true, trash);
  made_full_detection = true;
}
n_pts = this->keypoints.size();
